import cv2
import dlib
from scipy.spatial import distance
import numpy as np

def eye_aspect_ratio(eye):
    A = distance.euclidean(eye[1], eye[5])
    B = distance.euclidean(eye[2], eye[4])
    C = distance.euclidean(eye[0], eye[3])
    ear = (A + B) / (2.0 * C)
    return ear

def calculate_eye_distance(eye):
    eye_width = distance.euclidean(eye[0], eye[3])
    # 실제 눈의 너비 (cm 단위, 예: 3cm)
    actual_eye_width_cm = 3.0
    # 카메라 초점 길이 (임의의 값, 조정 필요)
    focal_length = 500
    distance_cm = (actual_eye_width_cm * focal_length) / eye_width
    return distance_cm

LEFT_EYE_START, LEFT_EYE_END = 42, 48
RIGHT_EYE_START, RIGHT_EYE_END = 36, 42

EAR_THRESHOLD = 0.25  # 조정 필요
EAR_CONSEC_FRAMES = 3

blink_counter = 0
total_blinks = 0

detector = dlib.get_frontal_face_detector()
predictor = dlib.shape_predictor("shape_predictor_68_face_landmarks.dat")

cap = cv2.VideoCapture(0)

while True:
    ret, frame = cap.read()
    if not ret:
        break

    gray = cv2.cvtColor(frame, cv2.COLOR_BGR2GRAY)
    rects = detector(gray, 0)

    for rect in rects:
        shape = predictor(gray, rect)
        shape = np.array([[p.x, p.y] for p in shape.parts()])
        
        left_eye = shape[LEFT_EYE_START:LEFT_EYE_END]
        right_eye = shape[RIGHT_EYE_START:RIGHT_EYE_END]
        
        left_ear = eye_aspect_ratio(left_eye)
        right_ear = eye_aspect_ratio(right_eye)
        
        ear = (left_ear + right_ear) / 2.0

        if ear < EAR_THRESHOLD:
            blink_counter += 1
        else:
            if blink_counter >= EAR_CONSEC_FRAMES:
                total_blinks += 1
            blink_counter = 0

        left_eye_hull = cv2.convexHull(left_eye)
        right_eye_hull = cv2.convexHull(right_eye)
        cv2.drawContours(frame, [left_eye_hull], -1, (0, 255, 0), 1)
        cv2.drawContours(frame, [right_eye_hull], -1, (0, 255, 0), 1)

        # 왼쪽 눈의 거리 계산
        left_eye_distance = calculate_eye_distance(left_eye)
        right_eye_distance = calculate_eye_distance(right_eye)
        average_distance = (left_eye_distance + right_eye_distance) / 2.0

        cv2.putText(frame, f"Distance: {average_distance:.2f} cm", (10, 60),
                    cv2.FONT_HERSHEY_SIMPLEX, 0.7, (0, 0, 255), 2)

    cv2.putText(frame, "Blinks: {}".format(total_blinks), (10, 30),
                cv2.FONT_HERSHEY_SIMPLEX, 0.7, (0, 0, 255), 2)

    cv2.imshow("Blink Detection and Distance Measurement", frame)
    
    if cv2.waitKey(1) & 0xFF == ord('q'):
        break

cap.release()
cv2.destroyAllWindows()
